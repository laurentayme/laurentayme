// Generated by dia2code
#ifndef STATE__ELEMENT__H
#define STATE__ELEMENT__H

#include <stdlib.h>
#include <vector>
#include <string>

namespace state {
  class Position;
  class Abilities;
}

#include "Position.h"
#include "Abilities.h"

namespace state {

  /// class Element - 
  class Element {
    // Associations
    // Attributes
  protected:
    Position* position;
    size_t idType;
    size_t direction;
    float loc_x;
    float loc_y;
    std::vector<Abilities*> AbilitiesList;
    bool moving;
    // Operations
  public:
    Element ();
    virtual ~Element ();
    virtual size_t  getTypeId () const = 0;
    void setTypeId (size_t idtype);
    Position getPosition () const;
    void setPosition (Position& position);
    void const affiche_Position ();
    virtual void affiche_Classe () = 0;
    virtual bool isObstacle () const = 0;
    virtual bool isWall () const = 0;
    virtual std::string getClass () const = 0;
    virtual size_t getDirection () const = 0;
    virtual void setDirection (size_t direction) = 0;
    virtual size_t getSpaceType () const = 0;
    virtual int getWallType () const = 0;
    virtual int getLandscapeType () const = 0;
    virtual std::vector<Abilities*> getAbilitiesList () = 0;
    virtual size_t getPV () const = 0;
    virtual size_t getPM () const = 0;
    virtual size_t getPA () const = 0;
    virtual void setPM (int pm) = 0;
    virtual void setPA (int pa) = 0;
    virtual void setPV (int pv) = 0;
    virtual void setStatut (int statut) = 0;
    virtual int getStatut () const = 0;
    virtual void setLoc (float x, float y);
    bool getMoving () const;
    void setMoving (bool move);
    virtual size_t getTeam () const = 0;
    virtual void setTeam (size_t team) = 0;
    virtual bool isPlayer () const = 0;
    virtual void setPlayer (bool player) = 0;
    // Setters and Getters
    const size_t& getIdType() const;
    void setIdType(const size_t& idType);
    float getLoc_x() const;
    void setLoc_x(float loc_x);
    float getLoc_y() const;
    void setLoc_y(float loc_y);
    void setAbilitiesList(const std::vector<Abilities*>& AbilitiesList);
  };

};

#endif
