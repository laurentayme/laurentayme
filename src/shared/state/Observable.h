// Generated by dia2code
#ifndef STATE__OBSERVABLE__H
#define STATE__OBSERVABLE__H

#include <vector>
#include <memory>

namespace state {
  class Observer;
  class Event;
}

#include "Event.h"
#include "Observer.h"

namespace state {

  /// class Observable - 
  class Observable {
    // Associations
    // Attributes
  public:
    std::vector<Observer*> observers;
  private:
    mutable std::vector<std::shared_ptr<Event>> cachedEvents;
  protected:
    bool enableNotifications     = true;
    bool enableCache     = false;
    // Operations
  public:
    ~Observable ();
    void addObserver (Observer* obs);
    void removeObserver (Observer* obs);
    void notifyObservers (Event& e);
    void flushCachedEvents () const;
    void addObserver (Observer& obs);
    // Setters and Getters
    bool getEnableNotifications() const;
    void setEnableNotifications(bool enableNotifications);
    bool getEnableCache() const;
    void setEnableCache(bool enableCache);
  };

};

#endif
